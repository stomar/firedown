#!/usr/bin/ruby -w
# == Name
#
# firedown - file-based (remote) shutdown
#
# == Description
#
# +firedown+ is a command line tool
# that enables a remote shutdown of a Linux system
# via Dropbox or other file synchronization services.
#
# == See also
#
# Use <tt>firedown --help</tt> to display a brief help message.
#
# The full documentation for +firedown+ is available on the
# project home page.
#
# == Author
#
# Copyright (C) 2012 Marcus Stollsteimer
#
# License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
#
#--
# == TODO
#
# -i, --interval NUMBER:: Set polling interval for daemon mode (in seconds).
#
# --exec-delay NUMBER:: Wait NUMBER minutes before shutdown.
#
#++

require 'optparse'
require 'socket'
require 'logger'

# This module contains the classes for the +firedown+ tool.
module Firedown

  PROGNAME  = 'firedown'
  VERSION   = '0.0.1'
  DATE      = '2012-07-07'
  HOMEPAGE  = 'https://github.com/stomar/firedown/'

  COPYRIGHT = "Copyright (C) 2012 Marcus Stollsteimer.\n" +
              "License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\n" +
              "This is free software: you are free to change and redistribute it.\n" +
              "There is NO WARRANTY, to the extent permitted by law."

  # Parser for the command line options.
  # The class method parse! does the job.
  class Optionparser

    # Parses the command line options from +argv+.
    # (+argv+ is cleared).
    # Might print out help or version information.
    #
    # +argv+ - array with the command line options
    #
    # Returns a hash containing the option parameters.
    def self.parse!(argv)

      options = {
        :daemon_mode => false,
        :directories => nil,
        :log         => false,
        :log_file    => "/var/log/#{PROGNAME}.log",
        :log_level   => :info,
        :simulate    => false,
        :sleep_time  => 15
      }

      opt_parser = OptionParser.new do |opt|
        opt.banner = "Usage: #{PROGNAME} [options] directories"
        opt.separator ''
        opt.separator 'firedown is a command line tool'
        opt.separator 'that enables a remote shutdown of a Linux system'
        opt.separator 'via Dropbox or other file synchronization services.'
        opt.separator ''
        opt.separator 'firedown monitors a specified directory (or several directories)'
        opt.separator 'on the system for the presence of a trigger file or directory.'
        opt.separator 'If a trigger is found, firedown issues a shutdown.'
        opt.separator ''
        opt.separator 'The monitored directory might be synchronized via remote services'
        opt.separator 'like Dropbox or Ubuntu One, thus enabling a remotely triggered'
        opt.separator 'shutdown of the system.'
        opt.separator ''
        opt.separator "Bring down the system by creating `firedown.host'"
        opt.separator 'as empty trigger file or as empty directory in any of the'
        opt.separator "monitored directories, where `host' is the hostname"
        opt.separator 'of the system you want to bring down.'
        opt.separator ''
        opt.separator 'Options'
        opt.separator ''

        # process --version and --help first,
        # exit successfully (GNU Coding Standards)
        opt.on_tail('-h', '--help', 'Prints a brief help message and exits.') do
          puts opt_parser
          puts "\nReport bugs on the #{PROGNAME} home page: <#{HOMEPAGE}>"
          exit
        end

        opt.on_tail('-v', '--version',
                    'Prints a brief version information and exits.') do
          puts "#{PROGNAME} #{VERSION}"
          puts COPYRIGHT
          exit
        end

        opt.on('-d', '--[no-]daemon',
               'Detach and run in the background (implies --log).',
               "Checks for a trigger file every #{options[:sleep_time]} seconds.") do |d|
          options[:daemon_mode] = d
        end

        opt.on('--logging-level LEVEL', [:debug, :info, :warn],
               "Set logging level (warn, info, or debug). Default is `info'.") do |l|
          options[:log_level] = l
        end

        opt.on('-l', '--[no-]log',
               "Write messages to log file (`#{options[:log_file]}') instead of stderr.") do |l|
          options[:log] = l
        end

        opt.on('-n', '--no-act',
               'Do not bring down the system.',
               'Detects, reports, and removes trigger files, but does not issue a shutdown.') do
          options[:simulate] = true
        end

        opt.separator ''
      end
      opt_parser.parse!(argv)

      options[:log] = true  if options[:daemon_mode]

      # only directories should be left in argv
      argv.delete('')
      raise(ArgumentError, 'wrong number of arguments')  if argv.size < 1

      options[:directories] = argv.pop(argv.size).map {|dir| File.expand_path(dir) }

      options
    end
  end


  # Module with helper methods.
  module Helper

    # Custom format for logging messages.
    def self.log_formatter
      proc do |severity, datetime, progname, msg|
        time_string = if RUBY_VERSION =~ /1\.8/
                        datetime.strftime('%Y-%m-%d %H:%M:%S.') << "%06d" % datetime.usec
                      else
                        datetime.strftime('%Y-%m-%d %H:%M:%S.%6N')
                      end
        "#{time_string} #{severity.rjust(5)}: #{msg}\n"
      end
    end
  end


  # The main program. It's run! method is called
  # if the script is run from the command line.
  # It parses the command line arguments and does the job.
  class Application

    ERRORCODE = {:general => 1, :usage => 2}

    SHUTDOWN_MESSAGE = "This shutdown has been triggered by #{PROGNAME}."

    def initialize
      # parse options
      begin
        options = Optionparser.parse!(ARGV)
      rescue => e
        usage_fail(e.message)
      end

      @simulate = options[:simulate]
      @daemon_mode = options[:daemon_mode]
      @log_to_file = options[:log]
      @log_file = options[:log_file]
      @logging_level = case options[:log_level]
                       when :debug
                         Logger::DEBUG
                       when :info
                         Logger::INFO
                       when :warn
                         Logger::WARN
                       end

      # make sure log file exists and is writable by user
      if @log_to_file
        begin
          File.open(@log_file, 'a') {}
        rescue
          message = "Log file `#{@log_file}' not writable, "
          if @daemon_mode
            message << 'you will loose all log messages.'
          else
            message << 'stderr is used instead.'
          end
          warn message
          @log_to_file = false
        end
      end

      device = @log_to_file ? @log_file : STDERR
      @logger = Logger.new(device)
      @logger.level = @logging_level
      @logger.formatter = Helper::log_formatter

      @hostname = Socket::gethostname
      @hostname = 'all'  if (@hostname.empty? or @hostname.nil?)

      @trigger_files = options[:directories].map {|dir| "#{dir}/#{PROGNAME}.#{@hostname}" }

      @sleep_time = options[:sleep_time]
    end

    # The main program.
    def run!
      if @daemon_mode
        launch_message = "#{PROGNAME} daemon has been launched"
        launch_message << (@simulate ? ' in no-act mode.' : '.')
        daemonize do
          @logger.unknown launch_message
          @logger.unknown "Monitoring `#{@trigger_files.join("', `")}'..."
          @logger.unknown "Logging level is set to `#{logging_level_as_string}'."
          loop do
            check_and_act
            sleep @sleep_time
          end
        end
        warn launch_message
        warn "Monitoring `#{@trigger_files.join("', `")}'..."
      else
        check_and_act
      end
    end

    # Checks for trigger files and handles them.
    def check_and_act
      @logger.debug 'Checking for trigger files.'
      shutdown_triggered = false

      @trigger_files.each do |trigger|
        next  unless File.exist?(trigger)
        @logger.info "`#{trigger}' detected."

        begin  # just in case...
          if File.directory?(trigger)
            Dir.rmdir(trigger)  if Dir.entries(trigger).join == '...'  # empty
          else
            File.delete(trigger)  if File.stat(trigger).size == 0
          end
        rescue
        end

        if File.exist?(trigger)
          @logger.warn "Invalid trigger (`#{trigger}' could not be removed)."
        else
          shutdown_triggered = true
        end
      end

      return  unless shutdown_triggered

      if @simulate
        @logger.info 'This is a simulated shutdown!'
      else
        @logger.info 'Shutting down in 60 seconds!'
        system("shutdown -h +1 '#{SHUTDOWN_MESSAGE}'")
      end
    end

    # Daemonizes a block (see 'Beginning Ruby' by Peter Cooper).
    def daemonize
      fork do
        Process.setsid
        exit  if fork
        Dir.chdir('/')
        STDIN.reopen('/dev/null')
        STDOUT.reopen('/dev/null', 'a')
        STDERR.reopen('/dev/null', 'a')
        trap('TERM') do
          @logger.unknown "#{PROGNAME} daemon has been stopped."
          exit
        end
        trap('USR1') do
          toggle_debug
        end
        yield
      end
    end

    # Toggle logger to debug level and back.
    def toggle_debug
      if @logger.level == @logging_level
        @logger.level = Logger::DEBUG
      else
        @logger.level = @logging_level
      end
      @logger.unknown "Logging level changed to `#{logging_level_as_string}'."
    end

    # Return the logging level as string.
    def logging_level_as_string
      @logger.send(:format_severity, @logger.level)
    end

    # Prints an error message and exits.
    def general_fail(message) # :nodoc:
      warn "#{PROGNAME}: #{message}"
      exit ERRORCODE[:general]
    end

    # Prints an error message and a short help information, then exits.
    def usage_fail(message) # :nodoc:
      warn "#{PROGNAME}: #{message}"
      warn "Use `#{PROGNAME} --help' for valid options."
      exit ERRORCODE[:usage]
    end
  end

### call main method only if called on command line

if __FILE__ == $0
  Application.new.run!
end

end  # module
